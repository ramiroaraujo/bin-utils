#!/usr/bin/env python3

import sys
import json
import subprocess
from urllib.parse import urlparse
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, timedelta


def run_gcloud_command(conditions, project_id):
    query = " AND ".join(conditions)
    if not any("timestamp>=" in cond for cond in conditions):
        last_hour_timestamp = (datetime.utcnow() - timedelta(hours=1)).strftime("%Y-%m-%dT%H:%M:%S.%fZ")
        query += f' AND timestamp>="{last_hour_timestamp}"'

    command = [
        'gcloud', 'logging', 'read', query,
        '--format=json',
        f'--project={project_id}'
    ]

    result = subprocess.run(command, capture_output=True, text=True)
    if result.returncode != 0:
        print(f"Error: {result.stderr}")
        sys.exit(1)

    return json.loads(result.stdout)


def fetch_debug_log(log, project_id):
    timestamp = log['timestamp']
    path = urlparse(log['httpRequest']['requestUrl']).path
    debug_log = run_gcloud_command([
        f'resource.labels.service_name="job-board-application-api"',
        f'labels.path="{path}"',
        f'severity="DEBUG"',
        f'timestamp>="{timestamp}"'
    ], project_id)

    if debug_log:
        return {
            "status": log['httpRequest']['status'],
            "payload": debug_log[0].get('jsonPayload', {}).get('body', '')
        }
    return None


def main():
    project_id = input("Enter Project ID: ").strip()
    conditions = []
    print("Enter conditions (empty line to finish):")
    while True:
        line = input()
        if line == '':
            break
        conditions.append(line.strip())

    logs = run_gcloud_command(conditions, project_id)
    filtered_logs = [log for log in logs if log['httpRequest']['status'] != 201]
    final_output = []

    with ThreadPoolExecutor() as executor:
        results = list(executor.map(lambda log: fetch_debug_log(log, project_id), filtered_logs))

    final_output = [result for result in results if result is not None]

    print(json.dumps(final_output, indent=4))


if __name__ == '__main__':
    main()
