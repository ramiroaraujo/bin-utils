#!/usr/bin/env python3

import sys
import json
import subprocess
from datetime import datetime, timedelta


def choose_project_id():
    options = [
        "ff-app-prod",
        "ff-app-dev",
        "ff-app-iso-1",
        "ff-app-iso-2",
        "ff-app-iso-3",
        "ff-app-iso-4"
    ]
    print("Choose a Project ID:")
    for i, option in enumerate(options):
        print(f"{i + 1}. {option}")

    choice = int(input("Enter the number corresponding to your choice: ").strip())
    return options[choice - 1]


def build_gcloud_command(conditions, project_id):
    query = " AND ".join(conditions)
    if not any("timestamp>=" in cond for cond in conditions):
        last_hour_timestamp = (datetime.utcnow() - timedelta(hours=1)).strftime("%Y-%m-%dT%H:%M:%S.%fZ")
        query += f' AND timestamp>="{last_hour_timestamp}"'

    formatted_query = query.replace(" AND ", "\nAND ")
    return (
        f"gcloud logging read '{formatted_query}' "
        f"--format=json "
        f"--project={project_id}"
    )


def run_gcloud_command(command):
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    if result.returncode != 0:
        print(f"Error: {result.stderr}")
        sys.exit(1)

    return json.loads(result.stdout)


def main():
    project_id = choose_project_id()
    conditions = []
    print("Enter conditions (empty line to finish):")
    while True:
        line = input()
        if line == '':
            if not conditions:
                print("At least one condition must be entered. Exiting.")
                sys.exit(1)
            break
        conditions.append(line.strip())

    final_command = build_gcloud_command(conditions, project_id)
    print(f"Final gcloud command:\n{final_command}")
    confirm = input("Do you want to proceed? (yes/no): ").strip().lower()

    if confirm != "yes":
        print("Exiting.")
        sys.exit(0)

    logs = run_gcloud_command(final_command)
    if len(logs) > 20:
        print("Warning: More than 20 records were returned.")
        confirm = input("Do you want to proceed? (yes/no): ").strip().lower()
        if confirm != "yes":
            print("Exiting.")
            sys.exit(0)

    print(json.dumps(logs, indent=4))


if __name__ == '__main__':
    main()
