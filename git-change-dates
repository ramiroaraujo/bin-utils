#!/bin/bash

# Check if in a Git repository
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Not in a Git repository. Exiting."
    exit 1
fi

# Process command line options
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --count) COUNT="$2"; shift ;;
        *) echo "Unknown parameter passed: $1"; exit 1 ;;
    esac
    shift
done

# Get commit hashes and dates, and store them in a variable
COMMITS=$(git log --abbrev-commit --pretty="format:%h - %cd" -n "$COUNT")

# Add comments at the beginning of the string
COMMITS="# This string contains the commit hashes and dates for the last $COUNT commits.\n# You can edit the dates on each line. When you save and close this file, the commit dates will be updated.\n$COMMITS"

# Generate a temporary file
TMPFILE=$(mktemp /tmp/commits.XXXXXX)

# Write commits to the temporary file
echo -e "$COMMITS" > "$TMPFILE"

# Open the file in the editor
${EDITOR:-nano} "$TMPFILE"

# Read updated commits from the temporary file
UPDATED_COMMITS=$(cat "$TMPFILE")

# Update commit dates
while IFS=" - " read -r hash date; do
    # Ignore lines starting with '#'
    [[ "$hash" =~ ^#.*$ ]] && continue

    # Update commit date
    git filter-repo --force --commit-callback '
        if commit.original_id == "'"$hash"'":
            commit.committer_date = "'"$date"'"
            commit.author_date = "'"$date"'"
    '
done < <(echo "$UPDATED_COMMITS")

echo "Commit dates updated."
