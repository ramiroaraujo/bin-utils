#!/usr/bin/env python3

import subprocess
import tempfile
import os

# Check if in a Git repository
try:
    subprocess.check_output(['git', 'rev-parse', '--is-inside-work-tree'], stderr=subprocess.STDOUT)
except subprocess.CalledProcessError:
    print("Not in a Git repository. Exiting.")
    exit(1)

# Process command line options
COUNT = None
import sys

args = sys.argv[1:]
i = 0
while i < len(args):
    if args[i] == "--count":
        COUNT = args[i+1]
        i += 1
    else:
        print(f"Unknown parameter passed: {args[i]}")
        exit(1)
    i += 1

# Get commit hashes and dates, and store them in a variable
COMMITS = subprocess.check_output(['git', 'log', '--abbrev-commit', '--pretty=format:%h - %cd', '-n', COUNT]).decode()

# Add comments at the beginning of the string
COMMITS = f"# This string contains the commit hashes and dates for the last {COUNT} commits.\n" \
          f"# You can edit the dates on each line. When you save and close this file, the commit dates will be updated.\n{COMMITS}"

# Generate a temporary file
with tempfile.NamedTemporaryFile(prefix='commits.', delete=False) as TMPFILE:
    TMPFILE_NAME = TMPFILE.name
    TMPFILE.write(COMMITS.encode())

# Open the file in the editor
EDITOR = os.environ.get('EDITOR', 'nano')
subprocess.run([EDITOR, TMPFILE_NAME])

# Read updated commits from the temporary file
with open(TMPFILE_NAME, 'r') as file:
    UPDATED_COMMITS = file.read()

# Construct the filter-branch command
filter_branch_cmd = ["git", "filter-branch", "--env-filter"]

env_filter = ""
for line in UPDATED_COMMITS.splitlines():
    if line.startswith("#"):
        continue

    hash, date = line.split(" - ")
    env_filter += f'''
if test "$GIT_COMMIT" = "{hash}"; then
    export GIT_AUTHOR_DATE="{date}"
    export GIT_COMMITTER_DATE="{date}"
fi
'''

filter_branch_cmd.append(env_filter)

last_commit = UPDATED_COMMITS.splitlines()[0].split(" - ")[0]
filter_branch_cmd.extend([f"{last_commit}^..HEAD"])

# Execute the filter-branch command
subprocess.run(filter_branch_cmd)

# Clean up refs
subprocess.run(['rm', '-fr', f'$(git rev-parse --git-dir)/refs/original/'])

print("Commit dates updated.")
